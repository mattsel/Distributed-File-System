name: Package Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.x'

    - name: Install dependencies
      run: |
        dotnet restore ./src/DistributedFileSystem.sln

      # Windows
    - name: Publish Client (Windows)
      run: |
        dotnet publish ./src/DistributedFileSystem.Client/DistributedFileSystem.Client.csproj -c Release -r win-x64 --self-contained -o ./src/publish/Client

    - name: Publish MasterNode (Windows)
      run: |
        dotnet publish ./src/DistributedFileSystem.MasterNode/DistributedFileSystem.MasterNode.csproj -c Release -r win-x64 --self-contained -o ./src/publish/Master

    - name: Publish WorkerNode (Windows)
      run: |
        dotnet publish ./src/DistributedFileSystem.WorkerNode/DistributedFileSystem.WorkerNode.csproj -c Release -r win-x64 --self-contained -o ./src/publish/Worker

      # Linux
    - name: Publish Client (Linux)
      run: |
        dotnet publish ./src/DistributedFileSystem.Client/DistributedFileSystem.Client.csproj -c Release -r linux-x64 --self-contained -o ./src/publish/Client-linux

    - name: Publish MasterNode (Linux)
      run: |
        dotnet publish ./src/DistributedFileSystem.MasterNode/DistributedFileSystem.MasterNode.csproj -c Release -r linux-x64 --self-contained -o ./src/publish/Master-linux

    - name: Publish WorkerNode (Linux)
      run: |
        dotnet publish ./src/DistributedFileSystem.WorkerNode/DistributedFileSystem.WorkerNode.csproj -c Release -r linux-x64 --self-contained -o ./src/publish/Worker-linux

    - name: Prepare application folder
      run: |
        mkdir ./releases/DFS
        mkdir ./releases/DFS

        # Copy Windows publish releases
        xcopy /E /I /H /Y ./src/publish/Client ./releases/DFS/Client
        xcopy /E /I /H /Y ./src/publish/Master ./releases/DFS/Master
        xcopy /E /I /H /Y ./src/publish/Worker ./releases/DFS/Worker
        xcopy /E /I /H /Y ./src/shared_dependencies ./releases/DFS/SharedDependencies

        # Copy Linux publish releases
        xcopy /E /I /H /Y ./src/publish/Client-linux ./releases/DFS/Client-linux
        xcopy /E /I /H /Y ./src/publish/Master-linux ./releases/DFS/Master-linux
        xcopy /E /I /H /Y ./src/publish/Worker-linux ./releases/DFS/Worker-linux

        # Copy start/stop scripts for Windows and Linux
        copy ./src/Scripts/start.bat ./releases/DFS/start.bat
        copy ./src/Scripts/stop.bat ./releases/DFS/stop.bat
        copy ./src/Scripts/start.sh ./releases/DFS/start.sh
        copy ./src/Scripts/stop.sh ./releases/DFS/stop.sh

        copy README.txt ./releases/DFS/README.txt

    - name: Create ZIP file for Windows
      if: runner.os == 'Windows'
      run: |
        Compress-Archive -Path ./releases/DFS/* -DestinationPath ./releases/DFS.zip

    - name: Create TAR.GZ file for Linux
      if: runner.os == 'Linux'
      run: |
        tar -czf ./releases/DFS.tar.gz -C ./releases DFS

    - name: Upload Archive as artifact
      uses: actions/upload-artifact@v3
      with:
        name: DFS
        path: |
          ./releases/DFS.zip
          ./releases/DFS.tar.gz
